{"meta":{"title":"Jun","subtitle":null,"description":"不积跬步，无以至千里","author":"Jun","url":"http://yang1345521318.github.io","root":"/"},"pages":[{"title":"404","text":"","path":"404/index.html","date":"10-09","excerpt":""},{"title":"categories","text":"","path":"categories/index.html","date":"10-10","excerpt":""},{"title":"tags","text":"","path":"tags/index.html","date":"10-10","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"10-09","excerpt":""}],"posts":[{"title":"用Hexo搭博客踩过的坑","text":"前言花了两天时间搭建了个博客，用的Hexo框架，博客托管在GitHub Pages上，等玩的差不多了再买个域名就和搭建在云服务器上的博客网站没什么区别的，从开始搭到结束，期间遇到各种各样的坑，有Hexo框架本身由于版本更新和旧版插件冲突的坑，也有选择主题时碰到的各种坑，从刚入门到玩熟练还需要很长一段时间，这篇文章会把我个人遇到的坑全部记录下来。 在文章中插入图片无法显示关于在Hexo框架下给文章插入图片，一般的做法是：1，更改_config.yml文件的post_asset_folder参数为true，2，安装图片路径转换插件hexo-asset-image，3，使用相对路径的常规 markdown 语法 ！[](/example.jpg)引用图片。这种方法在每次创建新文章时都会同时创建一个资源文件夹，文章中需要使用的图片都可以放到这个文件夹中统一管理，然后通过相对路径来引用它们，这听起来并没有什么问题，但是，通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。随着Hexo 3 的发布，旧版的插件在新版的Hexo中被使用时出现了一些问题，路径转换插件并不能正确的将本地图片的路径转换成有效的路径，导致引用无效，我在尝试使用该插件时，本地生成静态网页时图片的路径会被更新为一堆乱码，如图 在查看生成的index.html文件时发现图片的路径确实发生了意外的改变，无法有效引用。在寻找了大量相关问题的解决方案后，终于在一位大佬的博客中找到了该问题的正确解决方法，在3.0版本的Hexo中，许多新的标签插件被加入到了核心代码中，其中也包括了图片引用插件，因此正确的图片引用方式不该是markdown 语法，而是使用下列的标签插件： 1&#123;% asset_img example.jpg avatar %&#125; 解决思路来自这里","path":"2019/10/11/用Hexo搭博客踩过的坑/","date":"10-11","excerpt":"","tags":[]},{"title":"基于Hexo + GitHub Pages搭建个人博客","text":"一、原理利用Hexo博客框架在本地生成静态网页，再托管到GitHub Pages上，通过购买域名，绑定域名达到通过个人域名访问本地生成的静态网页的效果。流程：本地搭建博客框架——使用Markdown等渲染引擎解析文章——选择主题生成静态网页——托管博客（将本地做的修改同步到云端）。讲述完原理就可以大致了解使用这种方法搭建个人博客需要一下几个具体操作：1，安装Hexo博客框架，并在本地配置好环境。2，拥有一个GitHub账号，需要使用代码托管服务，并与本地建立连接。3，使用基础模板在本地生成博客网页。4，为博客更换主题，并托管到GitHub上。5，（可选）购买域名，绑定域名。 二、安装Hexo框架并搭建依赖环境Hexo依赖Node.js和Git，Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。在这里可以下载最新版的Git，在这里可以下载最新版的Node.js。安装完成后在命令框中输入以下指令进行测试： 1node -v 1git --version 如果得到类似下图中的版本号，则安装成功可进入下一步。 然后再安装Hexo，在任意一个地方新建一个文件夹，重命名为Hexo，在该文件夹内右键，点击git bath，进到git bath界面。 在git bath中输入以下代码安装Hexo： 1npm install -g hexo-cli 安装好之后检查是否安装成功： 三、注册GitHub账户创建仓库并与本地建立连接GitHub 是基于 Git 的一个代码托管网站。开发者可以将代码在 GitHub 上开源，可以浏览其它项目的代码，fork 到自己名下做修改，clone 回本地（没有访问权限的 private repo 除外）使用，也可以发起 pull request 向上游提交自己的修改。在GitHub官网，注册自己的账号，填好用户名，密码，邮箱，并完成邮箱验证。 创建了账号之后（已有账号直接登录），就需要创建一个新的仓库，用于托管在本地生成的博客静态网页。 库名需要与账号名一致，由于我已经创建了一个库，所以提示我库名已被占用。 接着是利用SSH密钥完成本地到云端的连接，打开git bath，输入以下代码，回车三次。 1ssh-keygen -t rsa 在C盘用户目录下会生成id_rsa和id_rsa.pub这两个文件，前者是密钥，后者是公钥，用记事本打开id_rsa.pub，复制其中的全部内容，添加到GitHub上，这样本地的id_rsa密钥就可以和GitHub上的id_rsa.pub公钥进行配对，此时就授权成功了。 接着需要检验是否建立连接：在这一步操作之前必须配置git环境，否则会报错。在git bath中输入以下指令： 123$git config global user.name “Your Name”$git config global user.email “Your Email@XXX.com” 相当于完成本地的身份认证信息，然后再测试： 1$ssh -T git@github.com 出现下图结果则成功建立连接： 四、初始化本地博客静态网页在Hexo的根目录下打开git bath，在命令框中依次输入 1$hexo init 这一步是使用基础模板生成一个博客网站，但没有生成静态页面。 1$hexo g 这一步是编译初始化生成的源文件生成静态网页。 1$hexo s 这一步是启动本地服务器，可以通过http://localhost:4000/ 预览之前生成的静态网页。 这几步我已经做完了，莫得图可以放，按照步骤来不会错。 五、为博客更换主题并部署到GitHub Pages在这里挑选喜欢的主题，点击图片下方的文字能够跳转到相应的github源码下载。 将下载的主题整个文件夹拷贝至themes中， 同时需要更改配置文件， 记事本打开Hexo根目录下的配置文件，对主题名称进行修改。 我使用的主题名称为gal，因此修改为gal。 接下来要将本地的博客部署到GitHub Pages中： 首先需要对根目录下的配置文件进行修改：在配置文件中找到以下内容进行如图所示的修改，repository这一项后面填写的是之前在github上创建的库名，注意冒号后面需要空格。 修改完保存，在git bath中依次输入以下指令： 1hexo clean 清空之前的静态网页 1hexo g 生成新的静态网页 1hexo s 先在本地预览新生成的网页，检查修改是否生效，效果是否满意 1hexo d 本地预览没有问题后，部署到github，此时就可以通过链接https://userName.github.io 对个人博客进行访问。注意：从本地部署到github上传需要一定时间，部署指令下达后需要等待一段时间本地的网页才能在云端生效。","path":"2019/10/11/基于Hexo-GitHub-Pages搭建个人博客/","date":"10-11","excerpt":"","tags":[]},{"title":"test","text":"","path":"2019/10/09/test/","date":"10-09","excerpt":"","tags":[]},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2019/10/09/hello-world/","date":"10-09","excerpt":"","tags":[]}]}